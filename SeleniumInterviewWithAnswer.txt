1. Write a Java code to get the text available in 3rd window and move the control to 2nd window and close it.
 not exact code but something similar to this will work.
 String DefaultTab= driver.getWindowHandle(); //Defaul One
 //Do some operation to open 2nd window
 ArrayList<String> tabs2 = new ArrayList<String> (driver.getWindowHandles());
  tabs2 .remove(DefaultTab);
  driver.switchTo().window(tabs2.get(0));
  String SecondTab= driver.getWindowHandle();
 //Do some operation to open 3rd window
 ArrayList<String> tabs3 = new ArrayList<String> (driver.getWindowHandles());
    tabs3.remove(DefaultTab);
    tabs3.remove(SecondTab);
    driver.switchTo().window(tabs3.get(0));
//Perform some operation to get text
    driver.close();
// Now going back to 2nd  window (Idea is first go to the default window and then switch to 2nd window)
    driver.switchTo().window(DefaultTab);
    driver.switchTo().window(tabs2.get(0));

==============================================================================================================
2. Write Java code to Count no. Of words and sentence in notepad.
*****First, I would use a BufferedReader to read the file file in line-by-line using readLine(). Then split each line on whitespace using String.split("\\s") and use the size of the resulting array to see how many words are on that line.
public class readingOnly {

	public static void main(String[] args) throws IOException 
	{

		File f1 = new File("E:\\PERSONAL\\Self Learning\\SelfStudy\\SamplePic\\test.txt");				
		FileReader in = new FileReader(f1);		
		BufferedReader bin = new BufferedReader(in);
		String s1= bin.readLine();
		int noOfSentence=0;
		int noOfWords=0;		
	    while(s1!= null)
		{
	    	String []parts = s1.split("\\s");			
		    //System.out.println(s1);
		    for( String w : parts)
	          {
		    	noOfWords++;        
	          }
			s1=bin.readLine();
			noOfSentence++;
		}
	    System.out.println("No Of Sentence " + noOfSentence);
	    System.out.println("No Of Words " + noOfWords);
		bin.close();
		in.close();
	}

}

==================================================================================================================
3.Java Code to find out Length of the string without using length function.
public class StringLengthWithoutLengthMethod {

	//Program to find the Length of the string without using length method
	public static void main(String[] args) 
	{

		String s1= "This is for learning and practice purpose";
		int noOfCharater=0;		
		//char [] array;
		for( char c : s1.toCharArray())
        {
			noOfCharater++;        
        }
		System.out.println("The Length of the string is " + noOfCharater);
	}

}

===================================================================================================================
4.Listner(Selenium and TestNG)
a)Listner in Selenium:
Selenium WebDriver provides a very good framework for tracking the various events that happen while we are executing our test scripts using WebDriver.WebDriver has a class name EventFiringWebDriver, and to catch that event,an interface named WebDriverEventListener.we need to provide our own implementations for the overridden methods from the interface.
Implementation: All we need to do is to wrapp the normal webdriver with the EventFiringWebDriver.( which gives webDriver  capability to fire events.)All of the event listeners should be registered with the EventFiringWebDriver class to get notified.
Chart Flow :--Create an EventListener Class-->Create a WebDriver instance-->Create an instance of EventFiringWebDriver for  the driver created above---->Create an instance of EventListener class created above--->Register the Event Listener class with the EventFiringWebDriver--->Execute the events with the EventFiringWebDriver-->Verify if your Listenerclass got informed aboutthe events occurence

The EventListener class handles all of the events that are dispatched by the
EventFiringWebDriver class. There are the following two ways to create an
EventListener class:
• By implementing the WebDriverEventListener interface.
• By extending the AbstractWebDriverEventListener class provided in the
WebDriver library.

WebDriverEventListener interface , there are 15 methods.


Code :
//Create a WebDriver Instance.
WebDriver driver = new FirefoxDriver();
//Creating EventFiringWebDriver and EventListener instances
EventFiringWebDriver eventFiringDriver== new EventFiringWebDriver(driver);
IAmTheEventListener eventListener = new IAmTheEventListener(); (The class IAmTheEventListener  acutaly implements or extends WebDriverEventListener interface or extends AbstractWebDriverEventListener abstract class)
//Registering EventListener with EventFiringWebDriver
eventFiringDriver.register(eventListener);


Listner In TestNG:TestNG manages everything through Suite, Test and Methods and the Listeners gives us the ability to act before and after of every Suite, Test and Methods.Concept of listener is same TestNg listener always listen to all the events or flow happening in TestNg.
TestNg has many listner interfaces .
for  e.g
IAnnotationTransformer, IAnnotationTransformer2, IConfigurable, IConfigurationListener, IConfigurationListener2, IExecutionListener, IHookable, IInvokedMethodListener, IInvokedMethodListener2, IMethodInterceptor, IReporter, ISuiteListener, ITestListener.
But in selenium mostly we will be using two listners.
ISuiteListener :It has two method in it onStart() & onFinish(). Whenever a class implements this listener, TestNG guarantees the end-user that it will invoke the methods onStart() and onFinish() before and after running a TestNG Suite. So before TestNG picks up your suite for execution, it first makes a call to onStart() method and runs whatever has been scripted in this method. In a similar way, it again makes a call to onFinish() method after a suite has been run.

ITestListener :The working of this listener is also exactly the same as ISuiteListerner but the only difference is that it makes the call before and after the Test not the Suite.
It has 7 methods.
onFinish()
onStart()
onTestFailedButWithinSuccessPercentage(ITestResult result)
onTestFailure(ITestResult result)
onTestSkipped(ITestResult result)
onTestStart(ITestResult result)
onTestSuccess(ITestResult result)

Implementation:
very simple
Create a class which implements required listners.(By implementing listners method as per need requirement)
Create a Test class
Register test class with listner class using below tag.This is also called implementing listner implemented class to Test class.
@Listeners(PackageName.ListenerClassName)

==========================================================================================================================
5.Bug life cycle.
Defect Life Cycle (Bug Life cycle) is the journey of a defect from its identification to its closure. The Life Cycle varies from organization to organization and is governed by the software testing process the organization or project follows and/or the Defect tracking tool being used.
Typically they are as follow.
New-->Assigned-->Open(or Duplicate,Rejected,Deffered,Not a Bug)--->Fixed-->PendingRetest-->Retest(ReOpened)-->Verified-->CLosed

==========================================================================================================================

6.Write a code for screen shot ?
@Override
	public void onTestFailure(ITestResult arg0) 
	{
		    
		    String Testcase= arg0.getName();
		   // IClass Testcase1=arg0.getTestClass();
			File scrFile = ((TakesScreenshot)Browser.driver).getScreenshotAs(OutputType.FILE);
			String drc = "E:\\Results\\  " + Testcase + ".png";
			System.out.println("in listner" + arg0);
			//String drc = "E:\\Results\\  " + ".png";
			File file = new File(drc);
			try {
				FileUtils.copyFile(scrFile, file);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
		
	}

=========================================================================================================================
Some questions

Write test case for google search 
An array of zero and one was given. Need to segregate them.  
Fist repeated element in an array of integer
Find the missing number
write a program to print reverse a string?
write a program to print repeated characters in a string?
write a program to print leap year?
write a program to print this series?
1 
a a
2 2
b b b
3 3 3
c c c c
write a program to print the count the number of words , lines in a paragraph?
======================================================================================================================
//Code to get number of Frame/iframe in a page.

List<WebElement> ele = Browser.driver.findElements(By.tagName("iframe"));
	    System.out.println("Number of frames in a page :" + ele.size());
	    for(WebElement el : ele){
	      //Returns the Id of a frame.
	        System.out.println("Frame Id :" + el.getAttribute("id"));
	      //Returns the Name of a frame.
	        System.out.println("Frame name :" + el.getAttribute("name"));
	    }
	    
	    
	    //Assume driver is initialized properly. 
	    	    List<WebElement> ele = Browser.driver.findElements(By.tagName("iframe"));
	    	    System.out.println("Number of frames in a page :" + ele.size());
	    	    for(WebElement el : ele){
	    	      //Returns the Id of a frame.
	    	        System.out.println("Frame Id :" + el.getAttribute("id"));
	    	      //Returns the Name of a frame.
	    	        System.out.println("Frame name :" + el.getAttribute("name"));
	    }
.

==========================================================================================================================Selenium Code for autosuggestions.
//AutoSuggestion Code.
Here is the sample code which will start typing "vam" and then capture all search suggestions .
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class SearchSuggestion {
 
WebDriver driver;
 
 @BeforeTest
 public void start(){
   driver = new FirefoxDriver(); 
 }
  
 @Test
  public void SearchSuggestion() {
  
  driver.get("http://google.com");
  driver.findElement(By.id("gbqfq")).sendKeys("vam");
  driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
  
   WebElement table = driver.findElement(By.className("gssb_m")); 
   List rows = table.findElements(By.tagName("tr")); 
   Iterator i = rows.iterator(); 
   System.out.println("-----------------------------------------"); 
   while(i.hasNext()) { 
           WebElement row = i.next(); 
           List columns = row.findElements(By.tagName("td")); 
           Iterator j = columns.iterator(); 
           while(j.hasNext()) { 
                   WebElement column = j.next(); 
                   System.out.println(column.getText()); 
           } 
           System.out.println(""); 
            
   System.out.println("-----------------------------------------"); 
   } 
  } 
}

=========================================================================================================================





